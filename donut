#!/bin/bash
# Author - clark@castironcoding.com
# Purpose - Generates daily backup with retention for 1 week. Eventually smooch will replace this.
henchman_version="v2.0.2"
henchman_location="./lib/"
henchman_debug=false
main() {
    local RETENTION_TYPE_DAY=0
    local RETENTION_TYPE_SPECIFIC=1

    local working_dir
    local config_dir
    local backup_dir
    local config_files
    local donut_config
    local tmp_db_config
    local days_of_retention
    local specific_backup_retention
    local retention_type
    local today_date=$(date +"%m_%d_%Y")
    local today_date_full=$(date +"%m_%d_%Y-%s")
    local drop_date
    local ondemand=false


    hm get_working_directory && working_dir=${hm_return}
    config_dir="${working_dir}/config"
    backup_dir="${working_dir}/backup"
    donut_config="${working_dir}/.donut-config"
    tmp_db_config="${working_dir}/.donut-tmp-config"

    hm get_files_in_directory ${config_dir} && config_files=${hm_return}
    if [[ ${config_files[*]} == '' ]]; then echo "No config files found in ${config_dir}" && exit 1; fi

    if [  ${main_params_count} -gt 0 ]
    then
        if [[ ${main_params[0]} == 'ondemand' ]]
        then
            echo "Creating ondemand backup(s)."
            ondemand=true
        else
            echo "Gibberish. ${main_params[0]} is not a valid argument."
            echo "Pass 'ondemand' as an argument for instant backup(s)."
            exit 1
        fi
    else
        source ${donut_config}

        if [ -z "${specific_backup_retention}" ] && [ -z "${days_of_retention}" ]
        then
            days_of_retention=7
            specific_backup_retention=0
        fi

        if [ ${specific_backup_retention} -ge 1 ] && [ ${days_of_retention} -ge 1 ]
        then
            echo "Must set either backup retention or days of retention, not both." && exit 1;
        fi

        if [ ${specific_backup_retention} -ge 1 ]; then retention_type=RETENTION_TYPE_SPECIFIC; fi
        if [ ${days_of_retention} -ge 1 ]; then retention_type=RETENTION_TYPE_DAY; fi


        hm directory_create_if_not_present ${backup_dir}
        hm file_create_if_not_present ${tmp_db_config}

        if [[ "${retention_type}" == "${RETENTION_TYPE_DAY}" ]]
        then
            if [[ "$OSTYPE" == "linux-gnu" ]]
            then
                drop_date=$(date +%m_%d_%Y -d "${days_of_retention} day ago")
            elif [[ "$OSTYPE" == "darwin"* ]]; then
                drop_date=$(date -r $[ $(date +%s) - (${days_of_retention} * (60*60*24))] +"%m_%d_%Y")
            else
                echo "${OSTYPE} is not supported."
                exit 1
            fi
        fi
    fi


    purge_old_backup() {
        echo "Attempting to purge: ${1}"
        if [ -f ${1} ];
        then
            echo "Removing backup: ${1}"
            rm ${1}
        fi
    }

    for config_file in ${config_files[@]}; do
        if [ ${config_file} == '.git-keep' ]
        then
            continue
        fi
        local backup_file
        local backup_file_list
        local backup_file_array
        local backup_file_count
        local drop_file
        source "${config_dir}/${config_file}"
        if [[ ${ondemand} == true ]]; then
            backup_file="${backup_dir}/${schema}_ONDEMAND_${today_date}.sql"
        else
            if [[ "${retention_type}" == "${RETENTION_TYPE_SPECIFIC}" ]]
            then
                backup_file="${backup_dir}/${schema}_${today_date_full}.sql"
                hm get_files_in_directory ${backup_dir} && backup_file_list=${hm_return}
                backup_file_array=(${backup_file_list})
                backup_file_count=${#backup_file_array[@]}
                if [ ${backup_file_count} -ge ${specific_backup_retention} ]
                then
                    purge_old_backup "${backup_dir}/${backup_file_array[$(( ${backup_file_count} - 1 ))]}"
                fi
            else
                backup_file="${backup_dir}/${schema}_${today_date}.sql"
                drop_file="${backup_dir}/${schema}_${drop_date}.sql"
                purge_old_backup ${drop_file}
            fi
        fi
        case "${type}" in
            mysql)
                echo -e "[CLIENT]\npassword=${password}" > ${tmp_db_config}
                mysqldump --defaults-extra-file=${tmp_db_config} -h${host} -u${user} ${schema} > ${backup_file}
                echo "" > ${tmp_db_config}
                ;;
            postgresql)
                pg_dump -h${host} -U${user} --no-password  ${schema} > ${backup_file}
                ;;
            *)
                echo "Unknown database type: ${type}"
        esac
    done

}
henchman_load() { local hm_url="https://raw.githubusercontent.com/castiron/henchman/${henchman_version}/henchman";local hm_local_file="${henchman_location}/henchman-${henchman_version}";echo -e "Attempting to fetch Henchman ${henchman_version}\n";if [ -e ${hm_local_file} ];then echo -e "Henchman ${henchman_version} is ready for action.";else if hash curl 2>/dev/null;then curl ${hm_url} -o ${hm_local_file};elif hash wget 2>/dev/null;then wget ${hm_url} -O ${hm_local_file};else echo "Error! curl or wget required to fetch Henchman.";fi;fi;source ${hm_local_file}; }
henchman_load $@
